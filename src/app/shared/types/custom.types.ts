export type LogOptions = { value: unknown };
export type ScanStatus = 'scanning' | 'finished' | 'not scanning';
export type ConnectionStatus = 'connected' | 'connecting' | 'disconnected' | 'connection error';
export type BLEStatus = 'enabled' | 'enabling' | 'disabled';
export type BLEError = { error: string; message: string };
export type PropertyName = 'READ' | 'WRITE' | 'WRITE_WITHOUT_RESPONSE' | 'INDICATE';
export type DateType = 'per second' | 'per minute' | 'hourly' | 'daily' | 'weekly' | 'monthly' | 'yearly';
export type ActivityDataType = 'steps' | 'calories' | 'distance' | 'intensity';
export type DevicePlatform = 'ios' | 'android' | 'web' | 'unknown';
export type LogType = 'log' | 'error';
export type MessageType = 'toast' | 'alert' | 'loading';
export type ToastPosition = 'top' | 'middle' | 'bottom';
export type LoadingSpinner = 'bubbles' | 'circles' | 'circular' | 'crescent' | 'dots' | 'lines' | 'lines-sharp' | 'lines-sharp-small' | 'lines-small';
export type CopyableOptional<T> = { copy?(other: T): void };
export type Copyable<T> = { copy(other: T): void } | CopyableOptional<T>;
export type EqualityChecker<T> = { isEqual(other: T): boolean };
export type Constructor<T> = new (...args: any[]) => T;
export type SortFunction<T> = (a: T, b: T) => number;
export type NamedProperty<PropName extends string, T> = { [P in PropName]: T } | { [P in PropName]?: T | undefined };
export type NetworkStatus = 'online' | 'offline';
export type Gender = 'male' | 'female' | 'other';
export type ProgressStatus = 'started' | 'finished' | 'processing' | 'failed';
export type MeasurementValueDataType = 'avg' | 'max' | 'min';
export type IntervalType = 'today' | 'this_week' | 'this_month' | 'this_year';
export type FilterOperator = '<' | '<=' | '>' | '>=' | '==' | '!=';
